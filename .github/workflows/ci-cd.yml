name: CI/CD Pipeline - EProject Microservices

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_TAG: ${{ github.sha }}

jobs:
  # Job 1: Lint v√† ki·ªÉm tra code quality
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Install auth dependencies
        working-directory: ./auth
        run: npm ci

      - name: Install product dependencies
        working-directory: ./product
        run: npm ci

  # Job 2: Unit Tests cho t·ª´ng service
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        env:
          RABBITMQ_DEFAULT_USER: admin
          RABBITMQ_DEFAULT_PASS: 123456

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Wait for services to be ready
        run: |
          sleep 10
          curl -f http://localhost:15672 || exit 1

      - name: Install dependencies
        run: |
          npm ci
          cd auth && npm ci
          cd ../product && npm ci

      - name: Create test environment files
        run: |
          # Auth service env
          echo "MONGODB_AUTH_URI=mongodb://localhost:27017/eproject_auth_test" > auth/.env
          echo "JWT_SECRET=test_secret_key_12345" >> auth/.env
          
          # Product service env
          echo "MONGODB_PRODUCT_URI=mongodb://localhost:27017/eproject_product_test" > product/.env
          echo "JWT_SECRET=test_secret_key_12345" >> product/.env
          echo "RABBITMQ_URI=amqp://admin:123456@localhost:5672" >> product/.env
          echo "RABBITMQ_USER=admin" >> product/.env
          echo "RABBITMQ_PASS=123456" >> product/.env
          echo "LOGIN_TEST_USER=testuser" >> product/.env
          echo "LOGIN_TEST_PASSWORD=password" >> product/.env

      - name: Run Auth Service Tests
        working-directory: ./auth
        env:
          MONGODB_AUTH_URI: mongodb://localhost:27017/eproject_auth_test
          JWT_SECRET: test_secret_key_12345
        run: npm test

      - name: Start Auth Service (Background)
        working-directory: ./auth
        env:
          MONGODB_AUTH_URI: mongodb://localhost:27017/eproject_auth_test
          JWT_SECRET: test_secret_key_12345
        run: |
          node index.js &
          echo $! > auth.pid
          sleep 5

      - name: Run Product Service Tests
        working-directory: ./product
        env:
          MONGODB_PRODUCT_URI: mongodb://localhost:27017/eproject_product_test
          JWT_SECRET: test_secret_key_12345
          RABBITMQ_URI: amqp://admin:123456@localhost:5672
          RABBITMQ_USER: admin
          RABBITMQ_PASS: 123456
          LOGIN_TEST_USER: testuser
          LOGIN_TEST_PASSWORD: password
        run: npm test

      - name: Stop Auth Service
        if: always()
        run: |
          if [ -f auth/auth.pid ]; then
            kill $(cat auth/auth.pid) || true
            rm auth/auth.pid
          fi

  # Job 3: Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start services with Docker Compose
        run: |
          # T·∫°o env files cho docker-compose
          echo "MONGODB_AUTH_URI=mongodb://mongo:27017/eproject_auth" > auth/.env
          echo "JWT_SECRET=test_secret_key_12345" >> auth/.env
          echo "MONGODB_PRODUCT_URI=mongodb://mongo:27017/eproject_product" > product/.env
          echo "JWT_SECRET=test_secret_key_12345" >> product/.env
          echo "MONGODB_ORDER_URI=mongodb://mongo:27017/eproject_order" > order/.env
          
          # Start services
          docker-compose up -d --build
          
          # Wait for services to be ready
          sleep 30

      - name: Health Check Services
        run: |
          # Check if services are responding
          curl -f http://localhost:3000/health || echo "Auth service health check failed"
          curl -f http://localhost:3001/health || echo "Product service health check failed"
          curl -f http://localhost:3002/health || echo "Order service health check failed"
          curl -f http://localhost:3003/health || echo "API Gateway health check failed"

      - name: Run API Integration Tests
        run: |
          # Test API Gateway endpoints
          echo "Testing API Gateway integration..."
          # C√≥ th·ªÉ th√™m integration tests ·ªü ƒë√¢y

      - name: Stop services
        if: always()
        run: docker-compose down -v

  # Job 4: Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          cd auth && npm ci
          cd ../product && npm ci

      - name: Run security audit
        run: |
          cd auth && npm audit --audit-level high
          cd ../product && npm audit --audit-level high

  # Job 5: Build v√† Push Docker Images
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    strategy:
      matrix:
        service: [auth, product, order, api-gateway]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/eproject-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=commit-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 6: Deploy to staging (Optional)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy notification
        run: |
          echo "üöÄ Deploying EProject to staging environment..."
          echo "üì¶ Images pushed with tag: ${{ env.IMAGE_TAG }}"
          echo "üîó Services: auth, product, order, api-gateway"

      # Th√™m deployment logic ·ªü ƒë√¢y (kubectl, docker-compose, etc.)
      - name: Update deployment manifests
        run: |
          # C·∫≠p nh·∫≠t image tags trong deployment files
          echo "Updating deployment with new image tags..."

  # Job 7: Notify deployment status
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: always()

    steps:
      - name: Notify Success
        if: needs.build-and-push.result == 'success'
        run: |
          echo "‚úÖ CI/CD Pipeline completed successfully!"
          echo "üéâ EProject microservices deployed to staging"

      - name: Notify Failure
        if: needs.build-and-push.result == 'failure'
        run: |
          echo "‚ùå CI/CD Pipeline failed!"
          echo "üîç Check the logs for details"