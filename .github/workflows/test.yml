name: CI-CD

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  test:
    name: Unit and integration tests
    runs-on: ubuntu-latest
    # Run steps inside a container so we can resolve service hostnames (mongo, rabbitmq)
    container: node:18

    services:
      mongo:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ ping: 1 })' || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: admin
          RABBITMQ_DEFAULT_PASS: 123456
        ports:
          - 5672:5672
          - 15672:15672

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show Node version
        run: node -v

      - name: Create env files for services
        run: |
          mkdir -p auth product
          # Auth service
          echo "MONGODB_AUTH_URI=mongodb://mongo:27017/eproject_auth_test" > auth/.env
          echo "JWT_SECRET=secret" >> auth/.env
          # Product service
          echo "MONGODB_PRODUCT_URI=mongodb://mongo:27017/eproject_product_test" > product/.env
          echo "JWT_SECRET=secret" >> product/.env
          echo "RABBITMQ_URI=amqp://admin:123456@rabbitmq:5672" >> product/.env
          echo "RABBITMQ_USER=admin" >> product/.env
          echo "RABBITMQ_PASS=123456" >> product/.env
          # Test login credentials (used by product tests to call auth service)
          echo "LOGIN_TEST_USER=testuser" >> product/.env
          echo "LOGIN_TEST_PASSWORD=password" >> product/.env

      - name: Install dependencies (auth)
        working-directory: auth
        run: npm ci

      - name: Install dependencies (product)
        working-directory: product
        run: npm ci

      - name: Run tests (auth)
        working-directory: auth
        env:
          MONGODB_AUTH_URI: mongodb://mongo:27017/eproject_auth_test
          JWT_SECRET: secret
        run: npm test

      - name: Start auth service (background)
        working-directory: auth
        env:
          MONGODB_AUTH_URI: mongodb://mongo:27017/eproject_auth_test
          JWT_SECRET: secret
        run: |
          node index.js &
          sleep 6

      - name: Run tests (product)
        working-directory: product
        env:
          MONGODB_PRODUCT_URI: mongodb://mongo:27017/eproject_product_test
          JWT_SECRET: secret
          RABBITMQ_URI: amqp://admin:123456@rabbitmq:5672
          RABBITMQ_USER: admin
          RABBITMQ_PASS: 123456
          LOGIN_TEST_USER: testuser
          LOGIN_TEST_PASSWORD: password
        run: npm test

  # ...existing code...

  docker:
    name: Build and push images
    needs: test
    runs-on: ubuntu-latest
    # Chỉ kiểm tra event/branch ở cấp job
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Các bước dưới đây chỉ chạy khi có đủ secrets
      - name: Set up Docker Buildx
        if: ${{ secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN && secrets.DOCKERHUB_NAMESPACE }}
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: ${{ secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN && secrets.DOCKERHUB_NAMESPACE }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push auth image
        if: ${{ secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN && secrets.DOCKERHUB_NAMESPACE }}
        uses: docker/build-push-action@v5
        with:
          context: ./auth
          file: ./auth/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_NAMESPACE }}/eproject-auth:latest
            ${{ secrets.DOCKERHUB_NAMESPACE }}/eproject-auth:${{ github.sha }}

      - name: Build and push product image
        if: ${{ secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN && secrets.DOCKERHUB_NAMESPACE }}
        uses: docker/build-push-action@v5
        with:
          context: ./product
          file: ./product/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_NAMESPACE }}/eproject-product:latest
            ${{ secrets.DOCKERHUB_NAMESPACE }}/eproject-product:${{ github.sha }}

      - name: Build and push order image
        if: ${{ secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN && secrets.DOCKERHUB_NAMESPACE }}
        uses: docker/build-push-action@v5
        with:
          context: ./order
          file: ./order/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_NAMESPACE }}/eproject-order:latest
            ${{ secrets.DOCKERHUB_NAMESPACE }}/eproject-order:${{ github.sha }}

      - name: Build and push api-gateway image
        if: ${{ secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN && secrets.DOCKERHUB_NAMESPACE }}
        uses: docker/build-push-action@v5
        with:
          context: ./api-gateway
          file: ./api-gateway/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_NAMESPACE }}/eproject-apigateway:latest
            ${{ secrets.DOCKERHUB_NAMESPACE }}/eproject-apigateway:${{ github.sha }}